# generated by de0NanoADC_genModel.py, manual changes are not recommended.
from myhdl import *

# states of the FSM
st = enum( 'IDLE',
           'ASSERT_CS',
           'SCLK_FE1',
           'SCLK_L1',
           'SCLK_RE1',
           'SCLK_H1',
           'SCLK_FE2',
           'SCLK_L2',
           'SCLK_RE2',
           'SCLK_H2',
           'SCLK_FE3',
           'SCLK_L3',
           'SCLK_RE3',
           'SCLK_H3',
           'SCLK_FE4',
           'SCLK_L4',
           'SCLK_RE4',
           'SCLK_H4',
           'SCLK_FE5',
           'SCLK_L5',
           'SCLK_RE5',
           'SCLK_H5',
           'SCLK_FE6',
           'SCLK_L6',
           'SCLK_RE6',
           'SCLK_H6',
           'SCLK_FE7',
           'SCLK_L7',
           'SCLK_RE7',
           'SCLK_H7',
           'SCLK_FE8',
           'SCLK_L8',
           'SCLK_RE8',
           'SCLK_H8',
           'SCLK_FE9',
           'SCLK_L9',
           'SCLK_RE9',
           'SCLK_H9',
           'SCLK_FE10',
           'SCLK_L10',
           'SCLK_RE10',
           'SCLK_H10',
           'SCLK_FE11',
           'SCLK_L11',
           'SCLK_RE11',
           'SCLK_H11',
           'SCLK_FE12',
           'SCLK_L12',
           'SCLK_RE12',
           'SCLK_H12',
           'SCLK_FE13',
           'SCLK_L13',
           'SCLK_RE13',
           'SCLK_H13',
           'SCLK_FE14',
           'SCLK_L14',
           'SCLK_RE14',
           'SCLK_H14',
           'SCLK_FE15',
           'SCLK_L15',
           'SCLK_RE15',
           'SCLK_H15',
           'SCLK_FE16',
           'SCLK_L16',
           'SCLK_RE16',
           'SCLK_H16')


@block
def DE0NanoADC_driver( clk, reset, spi_csn, spi_din, spi_dout, spi_sck,
                       flag_fifo_full, data_packet, push_fifo, error,
                       ROM_sample_slot, ROM_channel ):
    dout_buffer = Signal(intbv(0)[12:])
    tick_counter = Signal(intbv(0)[48:])
    tick_counter_buffer = Signal(intbv(0)[48:])
    slot_no = Signal(intbv(0)[3:])
    ROM_channel_buffer = Signal(intbv(0)[3:])
    data_packet_buffer = Signal(intbv(0)[64:])
    db0= Signal(bool(0))
    db1= Signal(bool(0))
    db2= Signal(bool(0))
    db3= Signal(bool(0))
    db4= Signal(bool(0))
    db5= Signal(bool(0))
    db6= Signal(bool(0))
    db7= Signal(bool(0))
    db8= Signal(bool(0))
    db9= Signal(bool(0))
    db10= Signal(bool(0))
    db11= Signal(bool(0))
    state = Signal(st.IDLE)

    @always_seq(clk.posedge, reset=reset)
    def fsm_driver():
        if state == st.IDLE:
            state.next = st.ASSERT_CS
            spi_csn.next = 1
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.ASSERT_CS:
            state.next = st.SCLK_FE1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE1:
            state.next = st.SCLK_L1
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            if ROM_sample_slot < 7:
                ROM_sample_slot.next = ROM_sample_slot + 1
            else:
                ROM_sample_slot.next = 0
            data_packet_buffer.next = concat(ROM_channel_buffer[2], ROM_channel_buffer[1], ROM_channel_buffer[0], tick_counter_buffer, db11, db10, db9, db8, db7, db6, db5, db4, db3, db2, db1, db0)
        elif state == st.SCLK_L1:
            state.next = st.SCLK_RE1
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
        elif state == st.SCLK_RE1:
            state.next = st.SCLK_H1
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_H1:
            state.next = st.SCLK_FE2
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE2:
            state.next = st.SCLK_L2
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            ROM_channel_buffer.next = ROM_channel
        elif state == st.SCLK_L2:
            state.next = st.SCLK_RE2
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = ROM_channel[2]
        elif state == st.SCLK_RE2:
            state.next = st.SCLK_H2
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = ROM_channel[2]
        elif state == st.SCLK_H2:
            state.next = st.SCLK_FE3
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE3:
            state.next = st.SCLK_L3
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
        elif state == st.SCLK_L3:
            state.next = st.SCLK_RE3
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = ROM_channel[1]
        elif state == st.SCLK_RE3:
            state.next = st.SCLK_H3
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = ROM_channel[1]
        elif state == st.SCLK_H3:
            state.next = st.SCLK_FE4
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE4:
            state.next = st.SCLK_L4
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            tick_counter_buffer.next = tick_counter
        elif state == st.SCLK_L4:
            state.next = st.SCLK_RE4
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = ROM_channel[0]
        elif state == st.SCLK_RE4:
            state.next = st.SCLK_H4
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = ROM_channel[0]
        elif state == st.SCLK_H4:
            state.next = st.SCLK_FE5
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE5:
            state.next = st.SCLK_L5
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
        elif state == st.SCLK_L5:
            state.next = st.SCLK_RE5
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
            db11.next = spi_dout
        elif state == st.SCLK_RE5:
            state.next = st.SCLK_H5
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_H5:
            state.next = st.SCLK_FE6
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE6:
            state.next = st.SCLK_L6
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
        elif state == st.SCLK_L6:
            state.next = st.SCLK_RE6
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
            db10.next = spi_dout
        elif state == st.SCLK_RE6:
            state.next = st.SCLK_H6
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_H6:
            state.next = st.SCLK_FE7
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE7:
            state.next = st.SCLK_L7
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
        elif state == st.SCLK_L7:
            state.next = st.SCLK_RE7
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
            db9.next = spi_dout
        elif state == st.SCLK_RE7:
            state.next = st.SCLK_H7
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_H7:
            state.next = st.SCLK_FE8
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE8:
            state.next = st.SCLK_L8
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
        elif state == st.SCLK_L8:
            state.next = st.SCLK_RE8
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
            db8.next = spi_dout
        elif state == st.SCLK_RE8:
            state.next = st.SCLK_H8
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_H8:
            state.next = st.SCLK_FE9
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE9:
            state.next = st.SCLK_L9
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
        elif state == st.SCLK_L9:
            state.next = st.SCLK_RE9
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
            db7.next = spi_dout
        elif state == st.SCLK_RE9:
            state.next = st.SCLK_H9
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_H9:
            state.next = st.SCLK_FE10
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE10:
            state.next = st.SCLK_L10
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
        elif state == st.SCLK_L10:
            state.next = st.SCLK_RE10
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
            db6.next = spi_dout
        elif state == st.SCLK_RE10:
            state.next = st.SCLK_H10
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_H10:
            state.next = st.SCLK_FE11
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE11:
            state.next = st.SCLK_L11
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
        elif state == st.SCLK_L11:
            state.next = st.SCLK_RE11
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
            db5.next = spi_dout
        elif state == st.SCLK_RE11:
            state.next = st.SCLK_H11
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_H11:
            state.next = st.SCLK_FE12
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE12:
            state.next = st.SCLK_L12
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
        elif state == st.SCLK_L12:
            state.next = st.SCLK_RE12
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
            db4.next = spi_dout
        elif state == st.SCLK_RE12:
            state.next = st.SCLK_H12
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_H12:
            state.next = st.SCLK_FE13
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE13:
            state.next = st.SCLK_L13
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
        elif state == st.SCLK_L13:
            state.next = st.SCLK_RE13
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
            db3.next = spi_dout
        elif state == st.SCLK_RE13:
            state.next = st.SCLK_H13
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_H13:
            state.next = st.SCLK_FE14
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE14:
            state.next = st.SCLK_L14
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
        elif state == st.SCLK_L14:
            state.next = st.SCLK_RE14
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
            db2.next = spi_dout
        elif state == st.SCLK_RE14:
            state.next = st.SCLK_H14
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_H14:
            state.next = st.SCLK_FE15
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE15:
            state.next = st.SCLK_L15
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
        elif state == st.SCLK_L15:
            state.next = st.SCLK_RE15
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
            db1.next = spi_dout
        elif state == st.SCLK_RE15:
            state.next = st.SCLK_H15
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_H15:
            state.next = st.SCLK_FE16
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_FE16:
            state.next = st.SCLK_L16
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
        elif state == st.SCLK_L16:
            state.next = st.SCLK_RE16
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 0
            spi_din.next = 0
            db0.next = spi_dout
        elif state == st.SCLK_RE16:
            state.next = st.SCLK_H16
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        elif state == st.SCLK_H16:
            state.next = st.SCLK_FE1
            tick_counter.next = tick_counter + 1
            spi_csn.next = 0
            spi_sck.next = 1
            spi_din.next = 0
        else:
            raise ValueError('Undefined state')
    return fsm_driver